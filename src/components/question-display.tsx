
"use client";

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import {
  Calculator,
  Leaf,
  Atom,
  FlaskConical,
  Loader2,
  AlertTriangle,
} from "lucide-react";
import type { GenerateIgcseQuestionsOutput } from "@/ai/flows/generate-igcse-questions";
import Image from 'next/image';

type QuestionDisplayProps = {
  questions: GenerateIgcseQuestionsOutput['questions'] | null;
  isLoading: boolean;
  error: string | null;
};

const LoadingSpinner = () => (
  <div className="flex flex-1 flex-col items-center justify-center gap-4">
    <Loader2 className="size-12 animate-spin text-primary" />
    <p className="text-lg text-muted-foreground">Generating questions...</p>
  </div>
);

const ErrorDisplay = ({ error }: { error: string }) => (
  <div className="flex flex-1 items-center justify-center">
    <Alert variant="destructive" className="max-w-md">
      <AlertTriangle className="h-4 w-4" />
      <AlertTitle>Error</AlertTitle>
      <AlertDescription>{error}</AlertDescription>
    </Alert>
  </div>
);

export function QuestionDisplay({
  questions,
  isLoading,
  error,
}: QuestionDisplayProps) {
  if (isLoading) {
    return <LoadingSpinner />;
  }

  if (error) {
    return <ErrorDisplay error={error} />;
  }

  if (questions) {
    return (
      <div className="container mx-auto max-w-4xl py-8">
        <Card>
          <CardHeader>
            <CardTitle className="font-headline">Generated Questions</CardTitle>
            <CardDescription>
              Here are the questions generated by the AI.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {questions.map((q, index) => (
              <div key={index} className="rounded-md border bg-secondary/50 p-4">
                <p className="font-code whitespace-pre-wrap text-sm text-secondary-foreground">
                  {q.questionText}
                </p>
                {q.diagramUrl && (
                   <div className="mt-4 overflow-hidden rounded-md">
                      <Image
                        src={q.diagramUrl}
                        alt={`Diagram for question ${index + 1}`}
                        width={500}
                        height={300}
                        className="object-contain"
                      />
                   </div>
                )}
              </div>
            ))}
          </CardContent>
        </Card>
      </div>
    );
  }

  return null;
}
